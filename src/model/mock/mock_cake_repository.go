// Code generated by MockGen. DO NOT EDIT.
// Source: cake-store/src/model (interfaces: CakeRepository)

// Package mock is a generated GoMock package.
package mock

import (
	model "cake-store/src/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCakeRepository is a mock of CakeRepository interface.
type MockCakeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCakeRepositoryMockRecorder
}

// MockCakeRepositoryMockRecorder is the mock recorder for MockCakeRepository.
type MockCakeRepositoryMockRecorder struct {
	mock *MockCakeRepository
}

// NewMockCakeRepository creates a new mock instance.
func NewMockCakeRepository(ctrl *gomock.Controller) *MockCakeRepository {
	mock := &MockCakeRepository{ctrl: ctrl}
	mock.recorder = &MockCakeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCakeRepository) EXPECT() *MockCakeRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCakeRepository) Delete(arg0 context.Context, arg1 *model.Cake) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCakeRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCakeRepository)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockCakeRepository) FindAll(arg0 context.Context) ([]*model.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]*model.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCakeRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCakeRepository)(nil).FindAll), arg0)
}

// FindById mocks base method.
func (m *MockCakeRepository) FindById(arg0 context.Context, arg1 int) (*model.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*model.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCakeRepositoryMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCakeRepository)(nil).FindById), arg0, arg1)
}

// Save mocks base method.
func (m *MockCakeRepository) Save(arg0 context.Context, arg1 *model.Cake) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCakeRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCakeRepository)(nil).Save), arg0, arg1)
}

// Update mocks base method.
func (m *MockCakeRepository) Update(arg0 context.Context, arg1 *model.Cake) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCakeRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCakeRepository)(nil).Update), arg0, arg1)
}
